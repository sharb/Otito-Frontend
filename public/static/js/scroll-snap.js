!function(Q,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports["scroll-snap"]=n():Q["scroll-snap"]=n()}(this,function(){return function(Q){function n(F){if(B[F])return B[F].exports;var I=B[F]={i:F,l:!1,exports:{}};return Q[F].call(I.exports,I,I.exports,n),I.l=!0,I.exports}var B={};return n.m=Q,n.c=B,n.i=function(Q){return Q},n.d=function(Q,B,F){n.o(Q,B)||Object.defineProperty(Q,B,{configurable:!1,enumerable:!0,get:F})},n.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return n.d(B,"a",B),B},n.o=function(Q,n){return Object.prototype.hasOwnProperty.call(Q,n)},n.p="",n(n.s=1)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = function (element, config) {\n  if (config.scrollTimeout && (isNaN(config.scrollTimeout) || typeof config.scrollTimeout === 'boolean')) {\n    throw new Error('Optional config property \\'scrollTimeout\\' is not valid, expected NUMBER but found ' + _typeof(config.scrollTimeout).toUpperCase());\n  }\n  var SCROLL_TIMEOUT = config.scrollTimeout || SCROLL_TIMEOUT_DEFAULT;\n\n  if (config.scrollTime && (isNaN(config.scrollTime) || typeof config.scrollTime === 'boolean')) {\n    throw new Error('Optional config property \\'scrollTime\\' is not valid, expected NUMBER but found ' + _typeof(config.scrollTime).toUpperCase());\n  }\n  var SCROLL_TIME = config.scrollTime || SCROLL_TIME_DEFAULT;\n\n  if (!config.scrollSnapDestination) {\n    throw new Error('Required config property scrollSnapDestination is not defined');\n  }\n  var SCROLL_SNAP_DESTINATION = config.scrollSnapDestination;\n\n  var onAnimationEnd = void 0;\n  var timeOutId = null;\n  var scrollStart = null;\n  var animating = false;\n  var timer = 0;\n  var speedDeltaX = void 0;\n  var speedDeltaY = void 0;\n  var target = void 0;\n  var lastObj = void 0;\n  var lastScrollObj = void 0;\n  var lastScrollValue = {\n    x: null,\n    y: null\n  };\n\n  function checkScrollSpeed(value, axis) {\n    function clear() {\n      lastScrollValue[axis] = null;\n    }\n\n    var newValue = value;\n    var delta = void 0;\n    if (lastScrollValue[axis] !== null) {\n      delta = newValue - lastScrollValue[axis];\n    } else {\n      delta = 0;\n    }\n    lastScrollValue[axis] = newValue;\n    timer && clearTimeout(timer);\n    timer = setTimeout(clear, 50);\n    return delta;\n  }\n\n  function saveDeclaration(obj) {\n    obj.snapLengthUnit = parseSnapCoordValue(SCROLL_SNAP_DESTINATION);\n  }\n\n  function bindElement(element) {\n    target = element === document ? document.body : element;\n\n    /**\n     * set webkit-overflow-scrolling to auto.\n     * this prevents momentum scrolling on ios devices\n     * causing flickering behaviours and delayed transitions.\n     */\n    element.style.overflow = 'auto';\n    element.style.webkitOverflowScrolling = 'auto';\n\n    element.addEventListener('scroll', startAnimation, false);\n    saveDeclaration(target);\n  }\n\n  function unbindElement(element) {\n    element.style.webkitOverflowScrolling = null;\n    element.removeEventListener('scroll', startAnimation, false);\n  }\n\n  function startAnimation() {\n    speedDeltaX = checkScrollSpeed(target.scrollLeft, 'x');\n    speedDeltaY = checkScrollSpeed(target.scrollTop, 'y');\n    if (animating || speedDeltaX === 0 && speedDeltaY === 0) {\n      return;\n    }\n\n    handler(target);\n  }\n\n  /**\n   * scroll handler\n   * this is the callback for scroll events.\n   */\n  function handler(target) {\n    // use evt.target as target-element\n    lastObj = target;\n\n    lastScrollObj = getScrollObj(lastObj);\n\n    // if currently animating, stop it. this prevents flickering.\n    if (animationFrame) {\n      // cross browser\n      if (!window.cancelAnimationFrame(animationFrame)) {\n        clearTimeout(animationFrame);\n      }\n    }\n\n    // if a previous timeout exists, clear it.\n    if (timeOutId) {\n      // we only want to call a timeout once after scrolling..\n      clearTimeout(timeOutId);\n    } else {\n      scrollStart = {\n        y: lastScrollObj.scrollTop,\n        x: lastScrollObj.scrollLeft\n      };\n    }\n\n    timeOutId = setTimeout(animationHandler, SCROLL_TIMEOUT);\n  }\n\n  function animationHandler() {\n    // if we don't move a thing, we can ignore the timeout: if we did, there'd be another timeout added for scrollStart+1.\n    if (scrollStart.y === lastScrollObj.scrollTop && scrollStart.x === lastScrollObj.scrollLeft) {\n      // ignore timeout\n      return;\n    }\n\n    // detect direction of scroll. negative is up, positive is down.\n    var direction = {\n      y: speedDeltaY > 0 ? 1 : -1,\n      x: speedDeltaX > 0 ? 1 : -1\n    };\n    var snapPoint = void 0;\n\n    // get the next snap-point to snap-to\n    snapPoint = getNextSnapPoint(lastScrollObj, lastObj, direction);\n\n    lastObj.removeEventListener('scroll', startAnimation, false);\n\n    animating = true;\n\n    // smoothly move to the snap point\n    smoothScroll(lastScrollObj, snapPoint, function () {\n      // after moving to the snap point, rebind the scroll event handler\n      animating = false;\n      lastObj.addEventListener('scroll', startAnimation, false);\n      onAnimationEnd();\n    });\n\n    // we just jumped to the snapPoint, so this will be our next scrollStart\n    if (!isNaN(snapPoint.x || !isNaN(snapPoint.y))) {\n      scrollStart = snapPoint;\n    }\n  }\n\n  /**\n   * calculator for next snap-point\n   * @param  {Object} scrollObj - DOM element\n   * @param  {Object} obj - DOM element\n   * @param  {integer} direction - signed integer indicating the scroll direction\n   * @return {Object}\n   */\n  function getNextSnapPoint(scrollObj, obj, direction) {\n    // get snap length\n    var snapLength = {\n      y: roundByDirection(direction.y, getYSnapLength(obj, obj.snapLengthUnit.y)),\n      x: roundByDirection(direction.x, getXSnapLength(obj, obj.snapLengthUnit.x))\n    };\n    var top = scrollObj.scrollTop;\n    var left = scrollObj.scrollLeft;\n\n    // calc current and initial snappoint\n    var currentPoint = {\n      y: top / snapLength.y || 1,\n      x: left / snapLength.x || 1\n    };\n    var nextPoint = {\n      y: 0,\n      x: 0\n    };\n\n    // set target and bounds by direction\n    nextPoint.y = roundByDirection(direction.y, currentPoint.y);\n    nextPoint.x = roundByDirection(direction.x, currentPoint.x);\n\n    // calculate where to scroll\n    var scrollTo = {\n      y: nextPoint.y * snapLength.y,\n      x: nextPoint.x * snapLength.x\n    };\n\n    // stay in bounds (minimum: 0, maxmimum: absolute height)\n    scrollTo.y = stayInBounds(0, scrollObj.scrollHeight, scrollTo.y);\n    scrollTo.x = stayInBounds(0, scrollObj.scrollWidth, scrollTo.x);\n\n    return scrollTo;\n  }\n\n  /**\n   * ceil or floor a number based on direction\n   * @param  {Number} direction\n   * @param  {Number} currentPoint\n   * @return {Number}\n   */\n  function roundByDirection(direction, currentPoint) {\n    if (direction === -1) {\n      // when we go up, we floor the number to jump to the next snap-point in scroll direction\n      return Math.floor(currentPoint);\n    }\n    // go down, we ceil the number to jump to the next in view.\n    return Math.ceil(currentPoint);\n  }\n\n  /**\n   * keep scrolling in bounds\n   * @param  {Number} min\n   * @param  {Number} max\n   * @param  {Number} destined\n   * @return {Number}\n   */\n  function stayInBounds(min, max, destined) {\n    return Math.max(Math.min(destined, max), min);\n  }\n\n  /**\n   * parse snap destination/coordinate values.\n   * @param  {Object} declaration\n   * @return {Object}\n   */\n  function parseSnapCoordValue(declaration) {\n    // regex to parse lengths\n    var regex = /(\\d+)(px|%|vw) (\\d+)(px|%|vh)/g;\n    // defaults\n    var parsed = {\n      y: {\n        value: 0,\n        unit: 'px'\n      },\n      x: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n    var parsable = void 0;\n    var result = void 0;\n\n    // parse value and unit\n    if (parsable !== null) {\n      result = regex.exec(declaration);\n      // if regexp fails, value is null\n      if (result !== null) {\n        parsed.x = {\n          value: result[1],\n          unit: result[2]\n        };\n        parsed.y = {\n          value: result[3],\n          unit: result[4]\n        };\n      }\n    }\n    return parsed;\n  }\n\n  /**\n   * calc length of one snap on y-axis\n   * @param  {Object} obj the scroll object\n   * @param  {Object} declaration the parsed declaration\n   * @return {Number}\n   */\n  function getYSnapLength(obj, declaration) {\n    if (declaration.unit === 'vh') {\n      // when using vh, one snap is the length of vh / 100 * value\n      return Math.max(document.documentElement.clientHeight, window.innerHeight || 1) / 100 * declaration.value;\n    } else if (declaration.unit === '%') {\n      // when using %, one snap is the length of element height / 100 * value\n      return obj.offsetHeight / 100 * declaration.value;\n    } else {\n      // when using px, one snap is the length of element height / value\n      return obj.offsetHeight / declaration.value;\n    }\n  }\n\n  /**\n   * calc length of one snap on x-axis\n   * @param  {Object} obj the scroll object\n   * @param  {Object} declaration the parsed declaration\n   * @return {Number}\n   */\n  function getXSnapLength(obj, declaration) {\n    if (declaration.unit === 'vw') {\n      // when using vw, one snap is the length of vw / 100 * value\n      return Math.max(document.documentElement.clientWidth, window.innerWidth || 1) / 100 * declaration.value;\n    } else if (declaration.unit === '%') {\n      // when using %, one snap is the length of element width / 100 * value\n      return obj.offsetWidth / 100 * declaration.value;\n    } else {\n      // when using px, one snap is the length of element width / value\n      return obj.offsetWidth / declaration.value;\n    }\n  }\n\n  /**\n   * return the element scrolling values are applied to.\n   * when receiving window.onscroll events, the actual scrolling is on the body.\n   * @param  {Object} obj - DOM element\n   * @return {Object}\n   */\n  function getScrollObj(obj) {\n    // if the scroll container is body, the scrolling is invoked on window/document.\n    if (obj === document || obj === window) {\n      // firefox scrolls on document.documentElement\n      if (document.documentElement.scrollTop > 0 || document.documentElement.scrollLeft > 0) {\n        return document.documentElement;\n      }\n      // chrome scrolls on body\n      return document.querySelector('body');\n    }\n\n    return obj;\n  }\n\n  /**\n   * ease in cubic function\n   * @param  {Number} t current time of the tween\n   * @param  {Number} b beginning value of the property\n   * @param  {Number} c change between the beginning and destination value\n   * @param  {Number} d is the total time of the tween\n   * @return {Number}   easing factor\n   */\n  function easeInCubic(t, b, c, d) {\n    return c * (t = t / d) * t * t + b;\n  }\n\n  /**\n   * calculate the scroll position we should be in\n   * @param  {Number} start    the start point of the scroll\n   * @param  {Number} end      the end point of the scroll\n   * @param  {Number} elapsed  the time elapsed from the beginning of the scroll\n   * @param  {Number} duration the total duration of the scroll (default 500ms)\n   * @return {Number}          the next position\n   */\n  function position(start, end, elapsed, duration) {\n    if (elapsed > duration) {\n      return end;\n    }\n    return easeInCubic(elapsed, start, end - start, duration);\n  }\n\n  /**\n   * is the starting position at the edge of the container?\n   * @param  {Object} start    the start coordinates of the scroll\n   * @param  {Object} end      the end coordinates of the scroll\n   * @return {Boolean}\n   */\n  function isEdge(start, end) {\n    return start.x === 0 && speedDeltaY === 0 || start.y === 0 && speedDeltaX === 0;\n  }\n\n  // a current animation frame\n  var animationFrame = null;\n\n  /**\n   * smoothScroll function by Alice Lietieur.\n   * @see https://github.com/alicelieutier/smoothScroll\n   * we use requestAnimationFrame to be called by the browser before every repaint\n   * @param  {Object}   obj      the scroll context\n   * @param  {Number}  end      where to scroll to\n   * @param  {Function} callback called when the scrolling is finished\n   */\n  function smoothScroll(obj, end, callback) {\n    var start = {\n      y: obj.scrollTop,\n      x: obj.scrollLeft\n    };\n\n    // get animation frame or a fallback\n    var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {\n      window.setTimeout(fn, 15);\n    };\n    var duration = isEdge(start, end) ? 0 : SCROLL_TIME;\n    var startTime = null;\n\n    // setup the stepping function\n    function step(timestamp) {\n      if (!startTime) {\n        startTime = timestamp;\n      }\n      var elapsed = timestamp - startTime;\n\n      // change position on y-axis if result is a number.\n      if (!isNaN(end.y)) {\n        obj.scrollTop = position(start.y, end.y, elapsed, duration);\n      }\n\n      // change position on x-axis if result is a number.\n      if (!isNaN(end.x)) {\n        obj.scrollLeft = position(start.x, end.x, elapsed, duration);\n      }\n\n      // check if we are over due;\n      if (elapsed < duration) {\n        requestAnimationFrame(step);\n      } else {\n        // is there a callback?\n        if (typeof callback === 'function') {\n          // stop execution and run the callback\n          return callback(end);\n        }\n      }\n    }\n    animationFrame = requestAnimationFrame(step);\n  }\n\n  this.bind = function (callback) {\n    onAnimationEnd = typeof callback === 'function' ? callback : NOOP;\n\n    bindElement(element);\n  };\n\n  this.unbind = function () {\n    unbindElement(element);\n  };\n\n  return this;\n};\n\nvar SCROLL_TIMEOUT_DEFAULT = 300;\nvar SCROLL_TIME_DEFAULT = 2;\nvar NOOP = function NOOP() {};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _index = __webpack_require__(0);\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar snapConfig = {\n  scrollSnapDestination: '0% 90%', // scroll-snap-destination css property\n  scrollTimeout: 100, // time in ms after which scrolling is considered finished\n  scrollTime: 300 // time in ms for the smooth snap\n};\n\nfunction callback() {\n  console.log('snap');\n}\n\nvar element = document.getElementById('container');\nvar snapObject = new _index2.default(element, snapConfig);\nsnapObject.bind(callback);\n\n// unbind element\n// snapObject.unbind();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9pbmRleC5qcz83MmQ0Il0sIm5hbWVzIjpbInNuYXBDb25maWciLCJzY3JvbGxTbmFwRGVzdGluYXRpb24iLCJzY3JvbGxUaW1lb3V0Iiwic2Nyb2xsVGltZSIsImNhbGxiYWNrIiwiY29uc29sZSIsImxvZyIsImVsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic25hcE9iamVjdCIsImJpbmQiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztBQUVBLElBQU1BLGFBQWE7QUFDakJDLHlCQUF1QixRQUROLEVBQ2dCO0FBQ2pDQyxpQkFBZSxHQUZFLEVBRUc7QUFDcEJDLGNBQVksR0FISyxDQUdEO0FBSEMsQ0FBbkI7O0FBTUEsU0FBU0MsUUFBVCxHQUFxQjtBQUNuQkMsVUFBUUMsR0FBUixDQUFZLE1BQVo7QUFDRDs7QUFFRCxJQUFNQyxVQUFVQyxTQUFTQyxjQUFULENBQXdCLFdBQXhCLENBQWhCO0FBQ0EsSUFBTUMsYUFBYSxvQkFBZUgsT0FBZixFQUF3QlAsVUFBeEIsQ0FBbkI7QUFDQVUsV0FBV0MsSUFBWCxDQUFnQlAsUUFBaEI7O0FBRUE7QUFDQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNjcm9sbFNuYXAgZnJvbSAnLi4vLi4vc3JjL2luZGV4J1xuXG5jb25zdCBzbmFwQ29uZmlnID0ge1xuICBzY3JvbGxTbmFwRGVzdGluYXRpb246ICcwJSA5MCUnLCAvLyBzY3JvbGwtc25hcC1kZXN0aW5hdGlvbiBjc3MgcHJvcGVydHlcbiAgc2Nyb2xsVGltZW91dDogMTAwLCAvLyB0aW1lIGluIG1zIGFmdGVyIHdoaWNoIHNjcm9sbGluZyBpcyBjb25zaWRlcmVkIGZpbmlzaGVkXG4gIHNjcm9sbFRpbWU6IDMwMCAvLyB0aW1lIGluIG1zIGZvciB0aGUgc21vb3RoIHNuYXBcbn1cblxuZnVuY3Rpb24gY2FsbGJhY2sgKCkge1xuICBjb25zb2xlLmxvZygnc25hcCcpXG59XG5cbmNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJylcbmNvbnN0IHNuYXBPYmplY3QgPSBuZXcgU2Nyb2xsU25hcChlbGVtZW50LCBzbmFwQ29uZmlnKVxuc25hcE9iamVjdC5iaW5kKGNhbGxiYWNrKVxuXG4vLyB1bmJpbmQgZWxlbWVudFxuLy8gc25hcE9iamVjdC51bmJpbmQoKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RlbW8vc3JjL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")}])});